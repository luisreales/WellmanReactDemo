// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WellmanReactCore.Server.Models;

#nullable disable

namespace WellmanReactCore.Server.Migrations
{
    [DbContext(typeof(WellmanContext))]
    [Migration("20240816155019_ActivitiesUpgrade")]
    partial class ActivitiesUpgrade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WellmanReactCore.Server.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("DrillingActivityCodeSet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManagedPressureDrilling")
                        .HasColumnType("bit");

                    b.Property<int>("WellId")
                        .HasColumnType("int");

                    b.Property<int>("WellboreId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("WellId");

                    b.HasIndex("WellboreId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.DailyCost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DailyCosts");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.Well", b =>
                {
                    b.Property<int>("WellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WellId"));

                    b.Property<int>("CutOrFill")
                        .HasColumnType("int");

                    b.Property<string>("GeographicArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ground")
                        .HasColumnType("int");

                    b.Property<int>("KBToGround")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WellLicenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("WellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.WellBore", b =>
                {
                    b.Property<int>("WellBoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WellBoreId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WellId")
                        .HasColumnType("int");

                    b.Property<string>("WellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellBoreId");

                    b.HasIndex("WellId");

                    b.ToTable("WellBores");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.Activity", b =>
                {
                    b.HasOne("WellmanReactCore.Server.Models.Well", "Well")
                        .WithMany("Activities")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WellmanReactCore.Server.Models.WellBore", "WellBore")
                        .WithMany("Activities")
                        .HasForeignKey("WellboreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");

                    b.Navigation("WellBore");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.WellBore", b =>
                {
                    b.HasOne("WellmanReactCore.Server.Models.Well", "Well")
                        .WithMany("WellBores")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.Well", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("WellBores");
                });

            modelBuilder.Entity("WellmanReactCore.Server.Models.WellBore", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
